version: '3.7'

services:
  db:
    image: mysql:8
    environment:
      - MYSQL_ROOT_PASSWORD=admin
      - MYSQL_USER=admin
      - MYSQL_PASSWORD=admin
      - MYSQL_DATABASE=word_parser
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3306:3306"
    restart: always
    volumes:
      - mysql:/var/lib/mysql

  rabbit:
    image: rabbitmq:3.10
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - billing_core_rabbit_data:/var/lib/rabbit/data

  mock_mail:
    image: mailhog/mailhog
    ports:
      - "1025:1025" # smtp server
      - "8025:8025" # web ui http://localhost:8025/

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - RMQ_HOST=rabbit
      - MYSQL_HOST=db
    command: celery -A celery_app beat --loglevel=info
    depends_on:
      - rabbit
    restart: on-failure

  parser:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - RMQ_HOST=rabbit
      - MYSQL_HOST=db
      - WORK_DIR=/scan_directory
    command:  bash -c "python3 database/migration.py && celery -A celery_app worker --pool=prefork --concurrency=10 -Q Parsing --loglevel=info"
    volumes:
      - scan_directory:/scan_directory
    depends_on:
     - db
     - rabbit
    restart: on-failure

  sender:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - RMQ_HOST=rabbit
      - MYSQL_HOST=db
      - WORK_DIR=/scan_directory
      - SMTP_HOST=mock_mail
      - SMTP_PORT=1025
    command: celery -A celery_app worker --pool=prefork --concurrency=10 -Q Errors --loglevel=info
    volumes:
      - scan_directory:/scan_directory
    depends_on:
      - rabbit
      - mock_mail
    restart: on-failure

  watch_dog:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - RMQ_HOST=rabbit
      - MYSQL_HOST=db
      - WORK_DIR=/scan_directory
    command:  celery -A celery_app worker --loglevel=info
    volumes:
      - scan_directory:/scan_directory
    depends_on:
     - db
     - rabbit
    restart: on-failure

  reader:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - RMQ_HOST=rabbit
      - MYSQL_HOST=db
      - WORK_DIR=/scan_directory
    command: celery -A celery_app worker --concurrency=1 -Q Reader --loglevel=info
    volumes:
      - scan_directory:/scan_directory
    depends_on:
     - db
     - rabbit
    restart: on-failure

volumes:
  billing_core_rabbit_data:
    name: billing_core_rabbit_data
  mysql:
    name: mysql
  scan_directory:
    name: scan_directory
